class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        #find the length of merged array
        
        half_array_length = (len(nums1) + len(nums2))//2
        
        len1 = len(nums1), len2 = len(nums2)
        
        '''
        combine elements from each list to equal the half array length count
        The greatest value in the combined array will be the median (if total length is odd)
        
        nums1 = 3 7 15 23 
        nums2 = 12 16 17 25
        
        Use Binary search to identify no. of elements to include from nums1
        '''
        
        
        min_nums1 = 0, max_nums1 = len1, i = (min_nums1 + max_nums1)//2
        
        
        while (i <= len(nums1)):
            j = half_array_length - (i+1)
            
            if nums1[i] <= nums2[j] and nums1[i+1] >= nums2[j]:
                median = nums2[j]
                break
            elif nums1[i] >= nums2[j] and nums1[i] <= nums2[j+1]:
                median = nums1[i]
                break
            elif nums1[i] <= nums2[j] and nums1[i+1] <= nums2[j]:
                min_nums1 = i+1
            elif nums1[i] >= nums2[j] and nums1[i] >= nums2[j+1]:
                max_nums1 = i-1
            
            i = (min_nums1 + max_nums1)//2
            
            
        
